<<<<<<< HEAD
runApp()
=======
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
news_results <- get_headlines(query = input$chooseSymb,
sources = input$chooseSource,
api_key = Sys.getenv("NEWS_API_KEY"))
return(news_results)
})
}
runApp()
# Define server
source("scripts/analysis.R")
source("apikey.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
news_results <- get_headlines(query = input$chooseSymb,
sources = input$chooseSource,
api_key = Sys.getenv("NEWS_API_KEY"))
return(news_results)
})
}
>>>>>>> 9d536196bc56184b8bc681849430d485888ca12c
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
page_two <- tabPanel(
"Mission Statement",
sidebarLayout(
sidebarPanel(
h1("About Us:"),
p("We are Augene Pak, Dhruv Karia, Justin Zeng, and Max Bennett. We are
Informatics majors in the University of Washington and are each a member
of the Information School's class of 2024.")
),
mainPanel(
h1("Our Mission:"),
p("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
occaecat cupidatat non proident, sunt in culpa qui officia deserunt
mollit anim id est laborum.")
),
position = "right"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
library(tidymodels)
library(tensorflow)
library(tidyverse)
library(rvest)
library(BatchGetSymbols)
library(plotly)
library(ggplot2)
library(quantmod)
content <- read_html("http://web.archive.org/web/20210131152856/http://gambiste.com/index.php/gambiste-daily-stock-rating/")
tables <- content %>% html_table(fill = TRUE)
df <- do.call(rbind.data.frame, tables)
content <- read_html("http://gambiste.com/")
tables <- content %>% html_table(fill = TRUE)
df <- do.call(rbind.data.frame, tables)
top <- head(df, 10)
symbols <- top[['Symbol']]
result <- sapply(symbols, getSymbols, src = 'yahoo', auto.assign = FALSE,
from = as.Date(Sys.time())-182, verbose=TRUE, simplify = FALSE)
View(result)
View(symbols)
content <- read_html("http://gambiste.com/")
tables <- content %>% html_table(fill = TRUE)
df <- do.call(rbind.data.frame, tables)
symbols <- df[['Symbol']]
result <- sapply(symbols, getSymbols, src = 'yahoo', auto.assign = FALSE,
from = as.Date(Sys.time())-182, verbose=TRUE, simplify = FALSE)
View(result)
library(tidyverse)
library(rvest)
library(quantmod)
library(dplyr)
library(ggplot2)
content <- read_html("http://gambiste.com/")
tables <- content %>% html_table(fill = TRUE)
df <- do.call(rbind.data.frame, tables)
top <- head(df, 10)
symbols <- top[['Symbol']]
result <- sapply(symbols, getSymbols, src = 'yahoo', auto.assign = FALSE,
from = as.Date(Sys.time())-182, verbose=TRUE, simplify = FALSE)
#plot(result$SNDL, main = "Visualizations")
for (x in symbols) {
candle <- candleChart(result[[x]], up.col="darkgreen",dn.col="red",theme = "white", name = x)
}
View(candle)
View(result$GME)
View(df)
content <- read_html("http://gambiste.com/")
tables <- content %>% html_table(fill = TRUE)
df <- do.call(rbind.data.frame, tables)
tickers = c("AAPL", "NFLX", "AMZN", "K", "O")
tickers = df$Symbol
View(tickers)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
View(tickers)
getSymbols(tickers,
from = "2020-02-01",
to = "2020-02-01")
library(models)
library(tidyq)
content <- read_html("http://gambiste.com/")
tables <- content %>% html_table(fill = TRUE)
df <- do.call(rbind.data.frame, tables)
tickers = df$Symbol
getSymbols(tickers,
from = "2020-02-01",
to = "2020-02-01")
View(result)
getSymbols(tickers,
from = "2020-02-01",
to = "2020-02-01")
getSymbols(tickers,
from = as.Date(Sys.time())-182,
src = 'yahoo',
auto.assign = FALSE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
library(models)
library(tidyquant)
content <- read_html("http://gambiste.com/")
tables <- content %>% html_table(fill = TRUE)
df <- do.call(rbind.data.frame, tables)
tickers = df$Symbol
getSymbols(tickers,
from = as.Date(Sys.time())-182,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(tickers)
View(AA)
View(AA)
View(AA)
class(AAPL)
chart_Series(AAPL)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
library(purrr)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
head(prices)
View(prices)
tickers = df$Symbol[1:10]
View(tickers)
dff <- getSymbols(tickers,
from = as.Date(Sys.time()),
to = as.Date(Sys.time()),
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
View(df)
View(df)
getSymbols(tickers,
from = as.Date(Sys.time()),
to = as.Date(Sys.time()),
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
getSymbols(tickers,
from = as.Date(Sys.time()),
to = as.Date(Sys.time()),
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
write.csv(df, "C:\\CSE\\stock-market-twitter\\data\\gambiste-backup.csv")
df <- read.csv("data/gambiste-backup.csv")
tickers = df$Symbol[1:10]
View(tickers)
df2 <- getSymbols(tickers,
from = as.Date(Sys.time()),
to = as.Date(Sys.time()),
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
getSymbols(tickers,
from = as.Date(Sys.time()),
to = as.Date(Sys.time()),
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
getSymbols(tickers,
from = as.Date(Sys.time()),
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
getSymbols(tickers,
from = as.Date(Sys.time()) - 1,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
View(prices)
getSymbols(tickers,
from = as.Date(Sys.time()) - 180,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
head(prices)
getSymbols(tickers,
from = as.Date(Sys.time()) - 1,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
head(prices)
df2 <- getSymbols(tickers,
from = as.Date(Sys.time()) - 1,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
View(df2)
prices <- map(tickers,function(x) Ad(get(x)))
View(prices)
prices <- t(prices)
getSymbols(tickers,
from = as.Date(Sys.time()) - 1,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
prices <- t(prices)
getSymbols(tickers,
from = as.Date(Sys.time()) - 180,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
prices <- t(prices)
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
library(tidyverse)
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
View(df_adjuste)
View(df_adjusted)
View(df)
View(prices)
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
getSymbols(tickers,
from = mondate(as.Date(Sys.time())) - 3,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
tickers = df$Symbol[1:10]
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
getSymbols(tickers,
from = mondate(as.Date(Sys.time())) - 3,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
prices <- t(prices)
View(prices)
df <- read.csv("data/gambiste-backup.csv")
tickers = df$Symbol[1:10]
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
getSymbols(tickers,
from = mondate(as.Date(Sys.time())) - 3,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
prices <- t(prices)
library(mondate)
df <- read.csv("data/gambiste-backup.csv")
tickers = df$Symbol[1:10]
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
getSymbols(tickers,
from = mondate(as.Date(Sys.time())) - 3,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
prices <- t(prices)
library(models)
library(purrr)
library(tidyquant)
library(tidyverse)
library(mondate)
# content <- read_html("http://gambiste.com/")
# tables <- content %>% html_table(fill = TRUE)
# df <- do.call(rbind.data.frame, tables)
df <- read.csv("data/gambiste-backup.csv")
tickers = df$Symbol[1:10]
df_adjusted <- select(df, Rank, Symbol, Score, X3.Months.Perf)
getSymbols(tickers,
from = mondate(as.Date(Sys.time())) - 3,
src = 'yahoo',
auto.assign = TRUE,
verbose=TRUE,
simplify = FALSE)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
colnames(prices) <- tickers
prices <- t(prices)
shiny::runApp()
runApp()
=======
setwd("C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Hacklytics/StockMarket")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
a <- "old"
test <- function () {
assign("a", "new", envir = .GlobalEnv)
}
test()
a
runApp()
runApp()
runApp()
>>>>>>> 9d536196bc56184b8bc681849430d485888ca12c
runApp()
library(tidyverse)
library(rvest)
library(quantmod)
library(ggplot2)
library(BatchGeteqSymbols)
library(plotly)
# comment this if gambiste is clownin us
# content <- read_html("http://gambiste.com/")
df <- read.csv("./data/scrapeddf.csv", stringsAsFactors = FALSE)
# comment this if gambiste is clownin us
# tables <- content %>% html_table(fill = TRUE)
# comment this if gambiste is clownin us
# df <- do.call(rbind.data.frame, tables)
top <- head(df, 10)
symbols <- top[['Symbol']]
result <- sapply(symbols, getSymbols, src = 'yahoo', auto.assign = FALSE,
from = as.Date(Sys.time())-182, verbose=TRUE, simplify = FALSE)
#plot(result$SNDL, main = "Visualizations")
for (x in symbols) {
candle <- candleChart(result[[x]], up.col="darkgreen",dn.col="red",theme = "white", name = x)
}
runApp()
<<<<<<< HEAD
source("scripts/top_ten.R")
home_page <- tabPanel(
"Overview",
titlePanel("Stock Visualizations"),
sidebarLayout(
sidebarPanel(
helpText(
"Select a date range and a stock to examine.
Information collected from Yahoo Finance."
),
#textInput("symb", "Symbol", "AMC"),
dateRangeInput(
"dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())
),
selectInput("symb", "Top Stocks:",
c(symbols)),
actionButton("get", "Get Stock"),
br(),
br(),
checkboxInput("log", "Plot y axis on log scale",
value = FALSE)
),
mainPanel(
plotOutput("plot"),
br(),
br(),
datatable(top, options = list(compact)) #%>% formatStyle(),
)
)
)
page_two <- tabPanel("Mission Statement",
sidebarLayout(sidebarPanel(
h1("About Us:"),
p(
"We are Augene Pak, Dhruv Karia, Justin Zeng, and
Max Bennett. We are Informatics majors in the
University of Washington and are each a member of the
Information School's class of 2024."
)
),
mainPanel(
h1("Our Mission:"),
p(
"Our mission is to enable retail traders with the tools
and knowledge  needed to invest like a pro."
)
),
position = "right"))
news_page <- tabPanel("Top 10 News",
sidebarLayout(
sidebarPanel(
h1("Choose a Company"),
selectInput("chooseQuery", "Options", c(symbols)),
h1("Choose a News Source"),
selectInput("chooseSource", "Options", terms_sources$sources)
),
mainPanel(h1("News"),
textOutput("news")),
))
# Define UI
ui <- fluidPage(
theme = shinytheme("yeti"),
navbarPage("Stocklytics",
home_page,
page_two,
news_page),
# Loading icon
add_busy_spinner(
spin = "fingerprint",
color = "#333333",
margins = c(40, 20),
height = "5%",
width = "5%",
position = "bottom-right",
timeout = 50
)
)
=======
runApp()
install.packages(DT)
install.packages("DT")
install.packages("tidyverse")
install.packages("rvest")
install.packages("shiny")
install.packages("ggplot2")
shiny::runApp()
runApp()
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(query = input$chooseSymb,
sources = input$chooseSource,
api_key = Sys.getenv("NEWS_API_KEY"))
return(news_results)
})
}
runApp()
>>>>>>> 9d536196bc56184b8bc681849430d485888ca12c
runApp()
runApp()
runApp()
install.packages("BatchGeteqSymbols")
runApp()
library(BatchGeteqSymbols)
library(BatchGeteqSymbols)
library(tidyverse)
library(rvest)
library(quantmod)
library(ggplot2)
library(BatchGeteqSymbols)
library(plotly)
# comment this if gambiste is clownin us
# content <- read_html("http://gambiste.com/")
df <- read.csv("./data/scrapeddf.csv", stringsAsFactors = FALSE)
# comment this if gambiste is clownin us
# tables <- content %>% html_table(fill = TRUE)
# comment this if gambiste is clownin us
# df <- do.call(rbind.data.frame, tables)
top <- head(df, 10)
symbols <- top[['Symbol']]
result <- sapply(symbols, getSymbols, src = 'yahoo', auto.assign = FALSE,
from = as.Date(Sys.time())-182, verbose=TRUE, simplify = FALSE)
#plot(result$SNDL, main = "Visualizations")
for (x in symbols) {
candle <- candleChart(result[[x]], up.col="darkgreen",dn.col="red",theme = "white", name = x)
}
runApp()
runApp()
runApp()
View(terms_sources)
runApp()
runApp()
runApp()
library(jsonlite)
runApp()
runApp()
news_results <- get_headlines(api_key = Sys.getenv("NEWS_API_KEY"))
news_results <- get_headlines(category = "Business", api_key = Sys.getenv("NEWS_API_KEY"))
View(terms_category)
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
runApp()
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
return(body)
})
runApp()
<<<<<<< HEAD
=======
setwd("C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Fall Quarter 2020/INFO 201/exercises-Once28/chapter-18-exercises/exercise-1")
# load relevant libraries
library("httr")
library("jsonlite")
library(styler)
library(lintr)
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable
# from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Knives Out"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2"
resource <- "/reviews/search.json"
query_params <- list("api-key" = nty_apikey, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- fromJSON(content(response, "text"))
# What kind of data structure did this produce? A data frame? A list?
is.list(body)
# body is a list
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(body)
names(body$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
first_review <- reviews[1, ]
headline <- first_review$headline
summary <- first_review$summary_short
link <- first_review$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
review <- list(headline = headline, summary = summary, link = link)
View(body)
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
return(body)
})
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
return(body)
})
}
View(server)
View(server)
articles <- flatten(body$results)
View(articles)
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
View(articles)
return(body)
})
}
runApp('C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Hacklytics/StockMarket')
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# load relevant libraries
library("httr")
library("jsonlite")
library(styler)
library(lintr)
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable
# from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Knives Out"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2"
resource <- "/reviews/search.json"
query_params <- list("api-key" = nty_apikey, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- fromJSON(content(response, "text"))
# What kind of data structure did this produce? A data frame? A list?
is.list(body)
# body is a list
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(body)
names(body$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
first_review <- reviews[1, ]
headline <- first_review$headline
summary <- first_review$summary_short
link <- first_review$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
review <- list(headline = headline, summary = summary, link = link)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
View(articles)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
test_case <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
newsJSON <- fromJSON(content(test_case, "text"))
articles <- flatten(newsJSON$results)
setwd("C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Hacklytics/StockMarket")
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
test_case <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
newsJSON <- fromJSON(content(test_case, "text"))
articles <- flatten(newsJSON$results)
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f")
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
View(body)
View(response)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = "Trump", api_key = Sys.getenv("NEWS_API_KEY"))
View(news_results)
runApp()
View(df)
runApp()
>>>>>>> 9d536196bc56184b8bc681849430d485888ca12c
runApp()
runApp()
View(price)
View(prices)
runApp()
runApp()
View(body)
runApp()
runApp()
runApp()
View(news_results)
View(news_results)
runApp()
View(df)
runApp()
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderPrint({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = input$chooseSymb, source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
# response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
# body <- fromJSON(content(response, "text"))
articles <- flatten(news_results$results_df)
return(articles)
})
}
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderPrint({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = input$chooseSymb, source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
body <- fromJSON(content(response, "text"))
articles <- flatten(news_results$results_df)
return(articles)
})
}
View(body)
articles <- flatten(news_results$results_df)
View(articles)
runApp()
View(articles)
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderDataTable({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = input$chooseSymb, source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
body <- fromJSON(content(response, "text"))
articles <- news_results$results_df
return(articles)
})
}
runApp()
runApp()
View(df)
View(df)
View(df)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = "AMC", source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
body <- fromJSON(content(response, "text"))
articles <- news_results$results_df
View(articles)
View(body)
runApp()
runApp()
runApp()
runApp()
content <- read.csv("./data/scrapeddf.csv")
View(content)
runApp()
tables <- content %>% csv_table(fill = TRUE)
runApp()
View(df)
df <- read.csv("./data/scrapeddf.csv")
runApp()
df <- read.csv("./data/scrapeddf.csv")
View(df)
df <- read.csv("./data/scrapeddf.csv", stringsAsFactors = FALSE)
runApp()
df <- read.csv("./data/scrapeddf.csv", stringsAsFactors = FALSE)
# comment this if gambiste is clownin us
# tables <- content %>% html_table(fill = TRUE)
# comment this if gambiste is clownin us
# df <- do.call(rbind.data.frame, tables)
top <- head(df, 10)
symbols <- top[['Symbol']]
result <- sapply(symbols, getSymbols, src = 'yahoo', auto.assign = FALSE,
from = as.Date(Sys.time())-182, verbose=TRUE, simplify = FALSE)
View(result)
for (x in symbols) {
candle <- candleChart(result[[x]], up.col="darkgreen",dn.col="red",theme = "white", name = x)
}
View(candle)
