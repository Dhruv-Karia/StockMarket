source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
news_results <- get_headlines(query = input$chooseSymb,
sources = input$chooseSource,
api_key = Sys.getenv("NEWS_API_KEY"))
return(news_results)
})
}
runApp()
# Define server
source("scripts/analysis.R")
source("apikey.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
news_results <- get_headlines(query = input$chooseSymb,
sources = input$chooseSource,
api_key = Sys.getenv("NEWS_API_KEY"))
return(news_results)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Hacklytics/StockMarket")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
a <- "old"
test <- function () {
assign("a", "new", envir = .GlobalEnv)
}
test()
a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(DT)
install.packages("DT")
install.packages("tidyverse")
install.packages("rvest")
install.packages("shiny")
install.packages("ggplot2")
shiny::runApp()
runApp()
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(query = input$chooseSymb,
sources = input$chooseSource,
api_key = Sys.getenv("NEWS_API_KEY"))
return(news_results)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(terms_sources)
runApp()
runApp()
runApp()
library(jsonlite)
runApp()
runApp()
news_results <- get_headlines(api_key = Sys.getenv("NEWS_API_KEY"))
news_results <- get_headlines(category = "Business", api_key = Sys.getenv("NEWS_API_KEY"))
View(terms_category)
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
runApp()
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
return(body)
})
runApp()
setwd("C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Fall Quarter 2020/INFO 201/exercises-Once28/chapter-18-exercises/exercise-1")
# load relevant libraries
library("httr")
library("jsonlite")
library(styler)
library(lintr)
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable
# from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Knives Out"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2"
resource <- "/reviews/search.json"
query_params <- list("api-key" = nty_apikey, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- fromJSON(content(response, "text"))
# What kind of data structure did this produce? A data frame? A list?
is.list(body)
# body is a list
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(body)
names(body$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
first_review <- reviews[1, ]
headline <- first_review$headline
summary <- first_review$summary_short
link <- first_review$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
review <- list(headline = headline, summary = summary, link = link)
View(body)
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
return(body)
})
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
return(body)
})
}
View(server)
View(server)
articles <- flatten(body$results)
View(articles)
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderText({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
View(articles)
return(body)
})
}
runApp('C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Hacklytics/StockMarket')
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# load relevant libraries
library("httr")
library("jsonlite")
library(styler)
library(lintr)
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable
# from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Knives Out"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2"
resource <- "/reviews/search.json"
query_params <- list("api-key" = nty_apikey, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- fromJSON(content(response, "text"))
# What kind of data structure did this produce? A data frame? A list?
is.list(body)
# body is a list
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(body)
names(body$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
first_review <- reviews[1, ]
headline <- first_review$headline
summary <- first_review$summary_short
link <- first_review$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
review <- list(headline = headline, summary = summary, link = link)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
View(articles)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
test_case <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
newsJSON <- fromJSON(content(test_case, "text"))
articles <- flatten(newsJSON$results)
setwd("C:/Users/justi/OneDrive/Desktop/UW Freshman 2020 - 2021/Hacklytics/StockMarket")
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_headlines(category = "business", api_key = Sys.getenv("NEWS_API_KEY"))
test_case <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = news_results)
newsJSON <- fromJSON(content(test_case, "text"))
articles <- flatten(newsJSON$results)
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f")
body <- fromJSON(content(response, "text"))
articles <- flatten(body$results)
View(body)
View(response)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = "Trump", api_key = Sys.getenv("NEWS_API_KEY"))
View(news_results)
runApp()
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
View(body)
runApp()
runApp()
runApp()
View(news_results)
View(news_results)
runApp()
View(df)
runApp()
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderPrint({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = input$chooseSymb, source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
# response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
# body <- fromJSON(content(response, "text"))
articles <- flatten(news_results$results_df)
return(articles)
})
}
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderPrint({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = input$chooseSymb, source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
body <- fromJSON(content(response, "text"))
articles <- flatten(news_results$results_df)
return(articles)
})
}
View(body)
articles <- flatten(news_results$results_df)
View(articles)
runApp()
View(articles)
# Define server
source("scripts/analysis.R")
source(".Renviron")
server <- function(input, output) {
dataInput <- reactive({
getSymbols(
input$symb,
src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE
)
})
finalInput <- reactive({
return(dataInput())
})
output$plot <- renderPlot({
candleChart(dataInput(),
up.col = "darkgreen",
dn.col = "red",
theme = "white")
})
output$top_ten <- renderDataTable({
source("scripts/top_ten.R")
return(top)
})
output$news <- renderDataTable({
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = input$chooseSymb, source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
body <- fromJSON(content(response, "text"))
articles <- news_results$results_df
return(articles)
})
}
runApp()
runApp()
View(df)
View(df)
View(df)
Sys.setenv("NEWS_API_KEY" = "e9521f43b756474db9c3d82833252b6f")
news_results <- get_everything(query = "AMC", source = input$chooseSource, api_key = Sys.getenv("NEWS_API_KEY"))
response <- GET("http://newsapi.org/v2/everything?q=apple&from=2021-02-05&to=2021-02-05&sortBy=popularity&apiKey=e9521f43b756474db9c3d82833252b6f", query = input$chooseSymb)
body <- fromJSON(content(response, "text"))
articles <- news_results$results_df
View(articles)
View(body)
runApp()
runApp()
runApp()
runApp()
content <- read.csv("./data/scrapeddf.csv")
View(content)
runApp()
tables <- content %>% csv_table(fill = TRUE)
runApp()
View(df)
df <- read.csv("./data/scrapeddf.csv")
runApp()
df <- read.csv("./data/scrapeddf.csv")
View(df)
df <- read.csv("./data/scrapeddf.csv", stringsAsFactors = FALSE)
runApp()
df <- read.csv("./data/scrapeddf.csv", stringsAsFactors = FALSE)
# comment this if gambiste is clownin us
# tables <- content %>% html_table(fill = TRUE)
# comment this if gambiste is clownin us
# df <- do.call(rbind.data.frame, tables)
top <- head(df, 10)
symbols <- top[['Symbol']]
result <- sapply(symbols, getSymbols, src = 'yahoo', auto.assign = FALSE,
from = as.Date(Sys.time())-182, verbose=TRUE, simplify = FALSE)
View(result)
for (x in symbols) {
candle <- candleChart(result[[x]], up.col="darkgreen",dn.col="red",theme = "white", name = x)
}
View(candle)
